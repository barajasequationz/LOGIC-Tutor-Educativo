/*PROYECTO OOP: LOGIC: TUTOR*/
//Karim Herrera, Montse Sanchez, Sergio Barajas Jr.


#include <iostream> 
#include <vector> //para manejar vectores
#include <iomanip> //para setprecision
#include <string> 
#include <limits> //para manejar errores de entrada
#include <cstdlib> 
#include <fstream> // Para manejar archivos


using namespace std;


class Ejercicio {
    protected: 
        string dificultad;
        string respuesta;
        string enunciado;

    public: 
        Ejercicio(string enunciado, string respuesta, string dificultad) {
            this->enunciado = enunciado;
            this->dificultad = dificultad;
            this->respuesta = respuesta;
        }
        virtual ~Ejercicio() {} //destructor virtual para que se elimine correctamente el objeto hijo
        
        string getEnunciado() const {
            return enunciado;
        }
        string getDificultad() const {
            return dificultad;
        }
        string getRespuesta() const {
            return respuesta;
        }

        virtual void mostrarEjercicio() const {
            cout << "Dificultad: " << Ejercicio::getDificultad() << endl;
            cout << Ejercicio::getEnunciado() << endl; 
        }

};

class Historial {
    private: 
    double promedio;
    int respuestasCorrectas;
    int respuestasIncorrectas;

    Historial (int respuestasCorrectas, int respuestasIncorrectas, double promedio) {
        this->respuestasCorrectas = respuestasCorrectas;
        this->respuestasIncorrectas = respuestasIncorrectas;
        this->promedio = promedio;
    }
    public:
    
    double getPromedio() const {
        return promedio;
    }
    int getRespuestasCorrectas() const {
        return respuestasCorrectas;
    }
    int getRespuestasIncorrectas() const {
        return respuestasIncorrectas;
    }

    void calcularPromedio() {
        promedio = (respuestasCorrectas * 100) / (respuestasCorrectas + respuestasIncorrectas);
    }
    void agregarRespuestaCorrecta() {
        respuestasCorrectas++;
    }
    void agregarRespuestaIncorrecta() {
        respuestasIncorrectas++;
    }
    void mostrarHistorial() const {
        cout << "Respuestas correctas: " << respuestasCorrectas << endl;
        cout << "Respuestas incorrectas: " << respuestasIncorrectas << endl;
        cout << "Promedio: " << fixed << setprecision(2) << promedio << "%" << endl;
    }
    void reiniciarHistorial() {
        respuestasCorrectas = 0;
        respuestasIncorrectas = 0;
        promedio = 0.0;
    }
    
};

class Usuario {
    private:
    string nombre;
   
    vector<Historial> historial;
    public:
    Usuario(string nombre) {
        this->nombre = nombre;
      
    }
    string getNombre() const {
        return nombre;
    }

    
};

class EjercicioAritmetica : public Ejercicio {
    private:
    string tipo;
    int puntos;
    public:
    EjercicioAritmetica(string enunciado, string respuesta, string dificultad, string tipo, int puntos) : Ejercicio(enunciado, respuesta, dificultad) {
        this->tipo = tipo;
        this->puntos = puntos;
    }

    string getTipo() const {
        return tipo;
    }   
    
    void mostrarEjercicio() const override {
        cout << "Tipo: " << EjercicioAritmetica::getTipo() << endl;
        Ejercicio::mostrarEjercicio();
    }

};

class EjercicioLogica : public Ejercicio {
    private:
    string tipo;
    int puntos;
    public:
    EjercicioLogica(string enunciado, string respuesta, string dificultad, string tipo, int puntos) : Ejercicio(enunciado, respuesta, dificultad) {
        this->tipo = tipo;
        this->puntos = puntos;
    }
    string getTipo() const {
        return tipo;
    }
    void mostrarEjercicio() const override {
        cout << "Tipo: " << EjercicioLogica::getTipo() << endl;
        Ejercicio::mostrarEjercicio();
    }

};



void crearEjercicios(){

    
}

void menu(){
    cout << "1. Nuevo usuario" << endl;
    cout << "2. Iniciar sesion"  << endl;
    cout << "3. Salir" << endl;
    cout << "Seleccione una opcion: ";

}

void menuUsuario(){
    cout << "1. Empezar ejercicios" << endl;
    cout << "2. Ver historial"  << endl;
    cout << "3. Salir" << endl;
    cout << "Seleccione una opcion: " ;
}





int main(){
    cout << "LOGIC TUTOR EDUCATIVO" << endl;
    int opcion = 0;
    int opcionUsuario = 0;
    string nombre, password, password2, linea;
    do{
    menu();
    cin >> opcion;
    cin.ignore();
    
    string nombre;
    string linea;
    switch(opcion){
     
        case 1: {  
            cout << "Nuevo usuario" << endl;
            cout << "Ingrese su nombre: ";
            getline(cin, nombre);

           
            ifstream archivoIn("usuarios.txt");  // abrir el archivo en modo lectura y comprobar si el usuario ya existe
            bool existe = false;
            if (archivoIn.is_open()) {
                while (getline(archivoIn, linea)) {
                    size_t pos = linea.find(':');          // ya que separaremos el nombre y la contraseña con ':', usamos esto para encontrar la posición
                    string usuarioExistente;
                    if (pos != string::npos) { 
                        usuarioExistente = linea.substr(0, pos); //si se encuentra ':', separamos el nombre y la contraseña
                    } else {
                        usuarioExistente = linea; // si no se encuentra ':' se asume que la línea es solo el nombre
                    }
                    if (usuarioExistente == nombre) {   // si el nombre ingresado coincide con el nombre existente en el archivo
                        existe = true;
                        break;
                    }
                }
                archivoIn.close();
            } else {
                cout << "Error al abrir usuarios.txt para lectura" << endl;
                return 1;
            }

            if (existe) {
                cout << "El usuario ya existe" << endl;
            } else {
                // pedimos y confirmamos contraseña
                cout << "Ingrese una contraseña: ";
                getline(cin, password);
                cout << "Confirme la contraseña: ";
                getline(cin, password2);

                if (password != password2) {
                    cout << "Las contraseñas no coinciden, vuelva a intentarlo" << endl;
                } else {
                    ofstream archivoOut("usuarios.txt", ios::app);
                    if (archivoOut.is_open()) {
                        archivoOut << nombre << ':' << password << endl; // guardamos el nombre y la contraseña separados por ':'
                        archivoOut.close();
                        cout << "Usuario creado exitosamente" << endl;
                    } else {
                        cout << "Error al abrir el archivo" << endl;
                    }
                }
            }
            break;
        }

        case 2: {  
            cout << "Iniciar sesion" << endl;
            cout << "Ingrese su nombre: ";
            getline(cin, nombre);
            cout << "Ingrese su contraseña: ";
            getline(cin, password);

            ifstream archivoIn("usuarios.txt");
            bool coincide = false;
            if (archivoIn.is_open()) {
                while (getline(archivoIn, linea)) {
                    size_t pos = linea.find(':');
                    if (pos == string::npos) continue;                    // si no se encuentra ':', continuamos con la siguiente línea
                    string usuarioExistente = linea.substr(0, pos);              //misma lógica que antes, se busca el nombre y la contraseña
                    string passExistente   = linea.substr(pos + 1);
                    if (usuarioExistente == nombre && passExistente == password) { // si el nombre y la contraseña coinciden, el bool coincide se vuelve true
                        coincide = true;
                        break;
                    }
                }
                archivoIn.close();
            } else {
                cout << "Error al abrir el archivo" << endl;
                return 0;
            }

            if (coincide) {
                cout << "Inicio de sesion exitoso, bienvenido " << nombre << "!" << endl;
            } else {
                cout << "Usuario o contraseña incorrectos" << endl;
            }
            break;
        }

                do{
                    menuUsuario();
                    cin >> opcionUsuario;
                    cin.ignore();
                        

                    }while (opcionUsuario != 3);
                 }
                
            }while (opcion != 3);
           

    
    }
